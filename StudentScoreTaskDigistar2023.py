# -*- coding: utf-8 -*-
"""TaskDS5Savina.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1He27ejQ1q4Vkm8A5n4YJLlZunYFUevnS
"""

# Commented out IPython magic to ensure Python compatibility.
#import library#
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
sns.set(color_codes=True)

#import dataset#
from google.colab import files
uploaded = files.upload()

#1. load dataset#
data = pd.read_csv("StudentsScores.csv",  sep=",")
data

#2. Show Total Rows and Columns#
num_rows, num_columns = data.shape
print(f"Total rows: {num_rows}")
print(f"Total columns: {num_columns}")

#3. Drop Index Column#
print(data.to_string(index=False))

#4. Check Datatype#
data.dtypes

#5. Check Missing Value#
print(data.isnull().sum())

#6. Fill Missing Value with 0#
columns_to_fill = ['math score', 'reading score', 'writing score']
data[columns_to_fill] = data[columns_to_fill].fillna(0)

print(data.isnull().sum())

##Check Duplicate Data##
data.shape

duplicate_rows_data = data[data.duplicated()]
print("number of duplicate rows: ", duplicate_rows_data.shape)

data.count()

data = data.drop_duplicates()
data.count()

#dropping column#
data = data.drop(['Unnamed: 0'], axis=1)

##Change Title Column##
data = data.rename(columns={"race/ethnicity": "group", "parental level of education": "education", "test preparation course": "course", "math score": "math_score", "reading score": "reading_score", "writing score": "writing_score"})

#7. Create New Column Total Score#
data = data.assign(total_score = data['math_score'] + data['reading_score'] + data['writing_score'])
data.head(5)

#8. Statistical Summary#
summary_data = data.describe()
print(summary_data)

#9. Bar Chart Parental Level of Education (Education) vs Total Students#
education_counts = data['education'].value_counts()
plt.figure(figsize=(12,8))
bars = plt.bar(education_counts.index, education_counts.values, width=0.5)
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2.0, yval, int(yval), va='bottom', fontweight='bold')
plt.xlabel('Parental Level of Education')
plt.ylabel('Total Students')
plt.title('Parental Level of Education vs Total Students', fontweight='bold')
plt.show()

#10. Parental Level of Education vs Total Student Score (in Average)#
average_total_score_by_education = data.groupby('education')['total_score'].mean()
plt.figure(figsize=(12,8))
bars = plt.bar(average_total_score_by_education.index, average_total_score_by_education.values)
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2.0, yval, round(yval, 2), va='bottom', fontweight='bold')
plt.xlabel('Parental Level of Education')
plt.ylabel('Average of Total Score')
plt.title('Average Total Scores by Parental Level of Education', fontweight='bold')
plt.show()

#11. Parental Level of Education vs Average Student Score#
average_score_by_education = data.groupby('education')['average_score'].mean()
plt.figure(figsize=(12,8))
bars = plt.bar(average_score_by_education.index, average_score_by_education.values)
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2.0, yval, round(yval, 2), va='bottom', fontweight='bold')
plt.xlabel('Parental Level of Education')
plt.ylabel('Average Score')
plt.title('Average Scores by Parental Level of Education', fontweight='bold')
plt.show()

##OTHERS VISUALIZATION##

#Bar Chart Average Math Score by Course#
average_math_score_by_course = data.groupby('course')['math_score'].mean()
plt.figure(figsize=(5,6.5))
bars = plt.bar(average_math_score_by_course.index, average_math_score_by_course.values)
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2.0, yval, round(yval, 2), va='bottom', fontweight='bold')
plt.xlabel('Test Preparation Course')
plt.ylabel('Average Math Score')
plt.title('Average Math Scores by Course', fontweight='bold')
plt.show()

#Bar Chart Average Reading Score by Course#
average_reading_score_by_course = data.groupby('course')['reading_score'].mean()
plt.figure(figsize=(5,6.5))
bars = plt.bar(average_reading_score_by_course.index, average_reading_score_by_course.values)
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2.0, yval, round(yval, 2), va='bottom', fontweight='bold')
plt.xlabel('Test Preparation Course')
plt.ylabel('Average Reading Score')
plt.title('Average Reading Scores by Course', fontweight='bold')
plt.show()

#Bar Chart Average Writing Score by Course#
average_writing_score_by_course = data.groupby('course')['writing_score'].mean()
plt.figure(figsize=(5,6.5))
bars = plt.bar(average_writing_score_by_course.index, average_writing_score_by_course.values)
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2.0, yval, round(yval, 2), va='bottom', fontweight='bold')
plt.xlabel('Test Preparation Course')
plt.ylabel('Average Writing Score')
plt.title('Average Writing Scores by Course', fontweight='bold')
plt.show()

#TRYINGGGGGG#

#Create New Column Average Score#
data = data.assign(average_score = data['total_score'] / 3)
data.head(5)

data.corr()

sns.regplot(x = 'math_score', y = 'average_score', data = data)
plt.ylim(0,)
plt.title('Correlation Between Math Score and Average Score', fontweight='bold')

corr1 = data['math_score'].corr(data['average_score'])
corr1

sns.regplot(x = 'reading_score', y = 'average_score', data = data)
plt.ylim(0,)
plt.title('Correlation Between Reading Score and Average Score', fontweight='bold')

corr2 = data['reading_score'].corr(data['average_score'])
corr2

sns.regplot(x = 'writing_score', y = 'average_score', data = data)
plt.ylim(0,)
plt.title('Correlation Between Writing Score and Average Score', fontweight='bold')

corr3 = data['writing_score'].corr(data['average_score'])
corr3

#Bar Chart Average Score by Education#
average_score_by_education = data.groupby('education')['average_score'].mean()
plt.figure(figsize=(12,8))
bars = plt.bar(average_score_by_education.index, average_score_by_education.values)
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2.0, yval, round(yval, 2), va='bottom', fontweight='bold')
plt.xlabel('Parental Level of Education')
plt.ylabel('Average Score')
plt.title('Average Scores by Parental Level of Education', fontweight='bold')
plt.show()